<?xml version="1.0" encoding="utf-8"?> <search><entry><title>Java Service Provider Interface</title><url>/2023-java-service-provider-interface/</url><content><![CDATA[<p>With <code>interface oriented</code> concept, we should put our focus on the service it provided. Say <code>HttpServletRequest</code> from jakarta.servlet-api, we have different implementation like tomcat, jetty and undertow etc. Both of them has <code>HttpServletRequestImpl</code> which implements <code>HttpServletRequest</code> interface. Most of time, we should invoke the service provided by the interface and does NOT care about its underlying.</p>
<p>Another example is the JDBC. We use <code>java.sql.DriverManager</code> to find and load implementations of <code>java.sql.Driver</code>. In our program, we did NOT know which underlying database will be connected. But only when they are in the classpath, we can dynamic load them in our Java program with the <code>java.sql.Driver</code> interface. This is called Service Provider Interface, aka SPI, in Java.</p>
<p>SPI enables developers to extend applications functionalities by adding services implementation, e.g. Jar files, to classpath without modifying the application code base.</p>
<span id="more"></span>
<h2 id="define-the-service-api"><a class="markdownIt-Anchor" href="#define-the-service-api"></a> Define the Service API</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.wangkexiong.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMyService</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">doJob</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the wrapper with the set of services provided to application</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.wangkexiong.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMyServiceProvider</span> &#123;</span><br><span class="line">  IMyService <span class="title function_">getService</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Add <code>build.gradle</code> to package jar file</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> = <span class="string">&#x27;tk.wangkexiong&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="use-the-service-in-our-application"><a class="markdownIt-Anchor" href="#use-the-service-in-our-application"></a> Use the service in our application</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.wangkexiong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tk.wangkexiong.api.IMyServiceProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.ProviderNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceLoader</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> IMyServiceProvider <span class="title function_">provider</span><span class="params">()</span> &#123;</span><br><span class="line">    ServiceLoader&lt;IMyServiceProvider&gt; loader = ServiceLoader.load(IMyServiceProvider.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (IMyServiceProvider provider : loader) &#123;</span><br><span class="line">      <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProviderNotFoundException</span>(<span class="string">&quot;provider not found&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the main entrance</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">    MyServiceLoader.provider().getService().doJob();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Add <code>build.gradle</code> to package jar</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> = <span class="string">&#x27;tk.wangkexiong&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  implementation (</span><br><span class="line">    <span class="keyword">project</span>(<span class="string">&#x27;:service-api&#x27;</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="service-implementation-by-vendor"><a class="markdownIt-Anchor" href="#service-implementation-by-vendor"></a> Service Implementation by vendor</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tk.wangkexiong.api.IMyService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> <span class="keyword">implements</span> <span class="title class_">IMyService</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doJob</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;MyServiceImpl1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the wrapper:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.wangkexiong.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tk.wangkexiong.api.IMyService;</span><br><span class="line"><span class="keyword">import</span> tk.wangkexiong.api.IMyServiceProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceProvider</span> <span class="keyword">implements</span> <span class="title class_">IMyServiceProvider</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> IMyService <span class="title function_">getService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the most important, follow SPI specification to add file named <code>tk.wangkexiong.api.IMyServiceProvider</code> under <code>META-INF/services</code> with content:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">tk<span class="selector-class">.wangkexiong</span><span class="selector-class">.impl</span>.MyServiceProvider</span><br></pre></td></tr></table></figure>
<p>Add <code>build.gradle</code> to package jar file. If you followed the project file structure of standard Java project, which means above <code>META-INF</code> directory under <code>src/main/resources</code>, the <code>:jar</code> task will include above <code>META-INF</code> information. This will make the Java SPI package.</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> = <span class="string">&#x27;tk.wangkexiong&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  implementation (</span><br><span class="line">    <span class="keyword">project</span>(<span class="string">&#x27;:service-api&#x27;</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="run-the-application"><a class="markdownIt-Anchor" href="#run-the-application"></a> Run the application</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gradlew :service-api:jar</span><br><span class="line">$ gradlew :service-impl1:jar</span><br><span class="line">$ gradlew :app:jar</span><br><span class="line">$ <span class="built_in">cd</span> app/build/libs</span><br><span class="line">$ java -<span class="built_in">cp</span> ./app-1.0-SNAPSHOT.jar;../../../service-api/build/libs/service-api-1.0-SNAPSHOT.jar;../../../service-impl1/build/libs/service-impl1-1.0-SNAPSHOT.jar tk.wangkexiong.App</span><br><span class="line">MyServiceImpl1</span><br></pre></td></tr></table></figure>
<p>Source code available at <a href="https://github.com/wangkexiong/java-spi-impl">github</a></p>
]]></content><categories><category>Java</category></categories><tags><tag>Java</tag><tag>SPI</tag></tags></entry><entry><title>cert-manager for k8s</title><url>/2022-cert-manager-for-k8s/</url><content><![CDATA[<p>There is a cert-manager HELM package provided on k8s platform. It provides support for <code>Let's Encrypt</code>, and we can control to refresh it before its expiration (3 month).</p>
<span id="more"></span>
<h2 id="install-cert-manager"><a class="markdownIt-Anchor" href="#install-cert-manager"></a> install cert-manager</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create ns cert-manager</span><br><span class="line">$ kubectl apply -f cert-manager.crds.yaml</span><br><span class="line">$ helm install cert-manager -n cert-manager cert-manager-v1.6.1.tgz -f install.cert-manager.values.yaml</span><br></pre></td></tr></table></figure>
<h2 id="exchanging-for-external-service-usage"><a class="markdownIt-Anchor" href="#exchanging-for-external-service-usage"></a> Exchanging for external service usage</h2>
<p>Create <code>Certificate</code> resource and wait for the CA to be seen in <code>Secret</code>.<br />
Export the CA:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get secret wangkexiong.duckdns.org-tls -n certificate -o template --template=<span class="string">&#x27;&#123;&#123; index .data &quot;tls.crt&quot; &#125;&#125;&#x27;</span> | <span class="built_in">base64</span> -d</span><br><span class="line">$ kubectl get secret wangkexiong.duckdns.org-tls -n certificate -o template --template=<span class="string">&#x27;&#123;&#123; index .data &quot;tls.key&quot; &#125;&#125;&#x27;</span> | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure>
<p>Above crt and key file can be used by nginx directly. To make CA autorefresh, use cronjob to get latest CA.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 http2;</span><br><span class="line">        listen       443 ssl http2;</span><br><span class="line">        ssl_certificate     /etc/pki/nginx/wangkexiong.duckdns.org.crt;</span><br><span class="line">        ssl_certificate_key /etc/pki/nginx/wangkexiong.duckdns.org.key;</span><br><span class="line">        ssl_protocols  TLSv1.2;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content></entry><entry><title>Speed up your python</title><url>/2021-speed-up-your-python/</url><content><![CDATA[<p>One can write efficient python code, but it is very hard to beat build-in functions which are written by C.<br />
To speed up the python program, rewrite them in C as python module will increase the performance w/o any doubt.<br />
But that’s not the only way as we have JIT tech nowadays. pypy and numba(llvm) are the shinning stars in this area.</p>
<span id="more"></span>
<h2 id="pure-python-code-for-monte-carlo-pi-simulation"><a class="markdownIt-Anchor" href="#pure-python-code-for-monte-carlo-pi-simulation"></a> Pure python code for monte carlo PI simulation</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">monte_carlo_pi</span>(<span class="params">samples</span>):</span><br><span class="line">    acc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(samples):</span><br><span class="line">        x = random.random()</span><br><span class="line">        y = random.random()</span><br><span class="line">        <span class="keyword">if</span> (x ** <span class="number">2</span> + y ** <span class="number">2</span>) &lt;= <span class="number">1.0</span>:</span><br><span class="line">            acc += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4.0</span> * acc / samples</span><br></pre></td></tr></table></figure>
<h2 id="load-3rd-party-dynamic-library-in-python-no-need-for-3rd-party-source-code"><a class="markdownIt-Anchor" href="#load-3rd-party-dynamic-library-in-python-no-need-for-3rd-party-source-code"></a> Load 3rd party dynamic library in python (No need for 3rd party source code)</h2>
<p>Like JNA solution in java, python has its own implementation: ctypes or cffi<br />
The 3rd party library may NOT aware it will be ran in python environment.</p>
<h3 id="3rd-party-shared-library-check"><a class="markdownIt-Anchor" href="#3rd-party-shared-library-check"></a> 3rd party shared library check</h3>
<p>In windows world, we can use VC toolset dumpbin to check exported functions:<br />
if you forget to add <code>__declspec(dllexport)</code> before the function definition,<br />
the function cannot be used on other program…</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\&gt; dumpbin pi.dll /EXPORTS</span><br><span class="line">Microsoft (R) COFF/PE Dumper Version 9.00.30729.01</span><br><span class="line">Copyright (C) Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dump of file pi.dll</span><br><span class="line"></span><br><span class="line">File Type: DLL</span><br><span class="line"></span><br><span class="line">  Section contains the following exports <span class="keyword">for</span> pi.dll</span><br><span class="line"></span><br><span class="line">    00000000 characteristics</span><br><span class="line">    6048347E time <span class="built_in">date</span> stamp Wed Mar 10 10:52:46 2021</span><br><span class="line">        0.00 version</span><br><span class="line">           1 ordinal base</span><br><span class="line">           1 number of <span class="built_in">functions</span></span><br><span class="line">           1 number of names</span><br><span class="line"></span><br><span class="line">    ordinal hint RVA      name</span><br><span class="line"></span><br><span class="line">          1    0 00006AB0 monte_carlo_pi</span><br><span class="line"></span><br><span class="line">  Summary</span><br><span class="line"></span><br><span class="line">        3000 .data</span><br><span class="line">        1000 .pdata</span><br><span class="line">        3000 .rdata</span><br><span class="line">        1000 .reloc</span><br><span class="line">        A000 .text</span><br></pre></td></tr></table></figure>
<p>And in GCC world, we can use nm to check exported functions</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nm libpi.so -D</span><br><span class="line">0000000000201030 B __bss_start</span><br><span class="line">                 w __cxa_finalize</span><br><span class="line">0000000000201030 D _edata</span><br><span class="line">0000000000201038 B _end</span><br><span class="line">000000000000083c T _fini</span><br><span class="line">                 U gettimeofday</span><br><span class="line">                 w __gmon_start__</span><br><span class="line">00000000000005a8 T _init</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line">                 w _Jv_RegisterClasses</span><br><span class="line">0000000000000705 T monte_carlo_pi</span><br><span class="line">                 U rand</span><br><span class="line">                 U srand</span><br></pre></td></tr></table></figure>
<p>together with the .h file, it will form the regular C world for programmers</p>
<p>With above background knowledge, we can check if the shared library be good to use in python</p>
]]></content></entry><entry><title>different jvm implementation for Java language</title><url>/2021-different-jvm-implementation-for-java-language/</url><content><![CDATA[<p>Besides Oracle Java distibution, there are some other vendors provide Java distributions. If you use them to replace Oracle JDK or OpenJDK, make sure they passed JCK. Which can help to check the compatibility for this change.</p>
<p>However, there are some vendors provide enhancement features in the JVM, here are some highlights.</p>
<span id="more"></span>
<h2 id="alibaba-dragonwell"><a class="markdownIt-Anchor" href="#alibaba-dragonwell"></a> Alibaba Dragonwell</h2>
<h3 id="1-wisp2-dragonwell8"><a class="markdownIt-Anchor" href="#1-wisp2-dragonwell8"></a> 1. Wisp2 - Dragonwell8</h3>
<p>corouting implemeted in JVM level, refer: <a href="https://github.com/alibaba/dragonwell8/wiki/Wisp-Documentation">https://github.com/alibaba/dragonwell8/wiki/Wisp-Documentation</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PingPong</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        BlockingQueue&lt;Byte&gt; q1, q2;</span><br><span class="line">        q1 = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Byte&gt;(<span class="number">1024</span>);</span><br><span class="line">        q2 = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Byte&gt;(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        pool.submit(() -&gt; pingpong(q2, q1));</span><br><span class="line">        Future&lt;Long&gt; future = pool.submit(() -&gt; pingpong(q1, q2));</span><br><span class="line">        q1.put((<span class="type">byte</span>) <span class="number">1</span>);</span><br><span class="line">        System.out.println(future.get() + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">pingpong</span><span class="params">(BlockingQueue in, BlockingQueue out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1_000_000</span>; i++) &#123;</span><br><span class="line">            out.put(in.take());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() - start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_272&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (Alibaba Dragonwell 8.5.4) (build 1.8.0_272-_2020_11_12_03_10-b00)</span><br><span class="line">OpenJDK 64-Bit Server VM (Alibaba Dragonwell 8.5.4) (build 25.272-b00, mixed mode)</span><br><span class="line">$ java PingPong</span><br><span class="line">23729 ms</span><br><span class="line">$ java -XX:+UnlockExperimentalVMOptions -XX:+UseWisp2 PingPong</span><br><span class="line">4400 ms</span><br></pre></td></tr></table></figure>
<h3 id="2-jwarmup"><a class="markdownIt-Anchor" href="#2-jwarmup"></a> 2. JWarmup</h3>
<p>refer: <a href="https://zhuanlan.zhihu.com/p/61817233">https://zhuanlan.zhihu.com/p/61817233</a></p>
<p>Gather pre-Warmup data when executing in Beta environment<br />
And we can start with these warmup data in production envrionment to shorten the JIT warmup period.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ JAVA_HOME=/path/to/dragonwell8/installation JAVA_OPTS=<span class="string">&quot;-XX:ReservedCodeCacheSize=512m -XX:CompilationWarmUpLogfile=<span class="variable">$PWD</span>/jwarmup.log -XX:+CompilationWarmUpRecording -XX:+CompilationWarmUp -XX:-TieredCompilation -XX:+DeoptimizeBeforeWarmUp -XX:CompilationWarmUpDeoptTime=30 -XX:+PrintCompilationWarmUpDetail&quot;</span> sh bin/catalina.sh start</span><br><span class="line">$</span><br><span class="line">$ JAVA_HOME=/path/to/dragonwell8/installation JAVA_OPTS=<span class="string">&quot;-XX:ReservedCodeCacheSize=512m -XX:CompilationWarmUpLogfile=<span class="variable">$PWD</span>/jwarmup.log -XX:+CompilationWarmUp -XX:-TieredCompilation -XX:+DeoptimizeBeforeWarmUp -XX:CompilationWarmUpDeoptTime=30 -XX:+PrintCompilationWarmUpDetail&quot;</span> sh bin/catalina.sh start</span><br></pre></td></tr></table></figure>
<h3 id="3-jfr"><a class="markdownIt-Anchor" href="#3-jfr"></a> 3. JFR</h3>
<p>collect diagnostic and profiling data with build-in module in minimal performance overhead.</p>
<p>We can periodly dump or use jcmd command to trigger the dump. The dump file can be used in JMC tool.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ JAVA_HOME=/path/to/dragonwell8/installation JAVA_OPTS=<span class="string">&quot;-XX:+EnableJFR -XX:StartFlightRecording=duration=1m,filename=rec.jfr&quot;</span> sh bin/catalina.sh start</span><br><span class="line">$</span><br><span class="line">$ jcmd &lt;PID&gt; JFR.start duration=10s filename=<span class="variable">$PWD</span>/rec3.jfr</span><br><span class="line">$</span><br><span class="line">$ jcmd &lt;PID&gt; JFR.start filename=<span class="variable">$PWD</span>/rec4.jfr</span><br><span class="line">$ jcmd &lt;PID&gt; JFR.dump name=4 filename=rec4.jfr</span><br></pre></td></tr></table></figure>
]]></content></entry><entry><title>proxy sound application on remote machine</title><url>/2021-proxy-sound-application-on-remote-machine/</url><content><![CDATA[<p>We can use pluse audio to play sound from remote machine over network.</p>
<p>For example, we have a remote server. And we want to play the sound on local machine while playing media file on the server. Here is the solution.</p>
<span id="more"></span>
<h2 id="start-pulseaudio-on-machine-with-audio-card"><a class="markdownIt-Anchor" href="#start-pulseaudio-on-machine-with-audio-card"></a> start pulseaudio on machine with audio card</h2>
<p>Win10 T470 laptop with sound speaker.</p>
<p>Get <a href="https://www.freedesktop.org/wiki/Software/PulseAudio/Ports/Windows/Support/">pulseaudio binary for windows</a> from official wiki, they provide the <a href="http://bosmans.ch/pulseaudio/pulseaudio-1.1.zip">pulseaudio mingw version 1.1</a>.</p>
<p>here is another place for <a href="https://gist.github.com/allquixotic/f2e973fba89b5e9f1bcaf3337630b934">building pulseaudio with mingw</a>, binary <a href="https://drive.google.com/file/d/13otTRdZVgesggP4y6LNp0ElfTiv8MKUE/view?usp=sharing">pulseaudio mingw version 13.0</a> is provided.<br />
use it with your own consideration.</p>
<p>add configuration in <code>etc\default.pa</code> to enable sound over tcp (acting as server)</p>
<ul>
<li><code>load-module module-native-protocol-tcp port=4713 auth-ip-acl=0.0.0.0/0</code><br />
the acl could be more accurate like 172.17.0.0/12 in CIDR format</li>
</ul>
<p>here are some other items may be impacted, use them only when above change is NOT enough for working</p>
<p>in <code>etc\default.pa</code></p>
<ul>
<li><code>load-module module-waveout sink_name=output source_name=input record=0</code></li>
<li><code>set-default-sink output</code></li>
</ul>
<p>in <code>etc\daemon.conf</code></p>
<ul>
<li><code>exit-idle-time = -1</code></li>
</ul>
<p>and now we can start pulseaudio by typing <code>bin\pulseaudio -vvvv</code> in cmd or powershell shell</p>
<h2 id="configure-client-mode-on-working-machine"><a class="markdownIt-Anchor" href="#configure-client-mode-on-working-machine"></a> configure client mode on working machine</h2>
<p>usually this is the machine where sound card is NOT available. (say virtual machine or Rasperberry PI)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install pulseaudio mpg123 -y</span><br><span class="line">$ <span class="built_in">mkdir</span> ~/.pulse</span><br><span class="line">$ <span class="built_in">cp</span> /etc/pulse/client.conf ~/.pulse/.</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;default-server = 10.10.10.1&quot;</span> &gt;&gt; ~/.pulse/client.conf</span><br></pre></td></tr></table></figure>
<p>now we can use <code>mpg123 abc.mp3</code> to play mp3 file on working machine and listen the voice on our target win10 machine.</p>
<h2 id="debug-information"><a class="markdownIt-Anchor" href="#debug-information"></a> debug information</h2>
<p>if we run pulseaudio with parameters -vvvv, we can see sample output on server side like this:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/client<span class="selector-class">.c</span>: Created <span class="number">4</span> <span class="string">&quot;Native client (TCP/IP client from 10.10.10.1:57842)&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/protocol-native<span class="selector-class">.c</span>: Client authenticated by IP ACL.</span><br><span class="line">D: <span class="selector-attr">[(null)]</span> pulsecore/protocol-native<span class="selector-class">.c</span>: Protocol version: remote <span class="number">1073741857</span>, local <span class="number">23</span></span><br><span class="line">D: <span class="selector-attr">[(null)]</span> pulsecore/protocol-native<span class="selector-class">.c</span>: SHM possible: no</span><br><span class="line">D: <span class="selector-attr">[(null)]</span> pulsecore/protocol-native<span class="selector-class">.c</span>: Negotiated SHM: no</span><br><span class="line">D: <span class="selector-attr">[(null)]</span> modules/module-augment-properties<span class="selector-class">.c</span>: Looking <span class="keyword">for</span> <span class="selector-class">.desktop</span> file <span class="keyword">for</span> mpg123<span class="selector-class">.bin</span></span><br><span class="line">D: <span class="selector-attr">[(null)]</span> pulsecore/memblockq<span class="selector-class">.c</span>: memblockq requested: maxlength=<span class="number">33554432</span>, tlength=<span class="number">0</span>, base=<span class="number">4</span>, prebuf=<span class="number">0</span>, minreq=<span class="number">1</span> maxrewind=<span class="number">0</span></span><br><span class="line">D: <span class="selector-attr">[(null)]</span> pulsecore/memblockq<span class="selector-class">.c</span>: memblockq sanitized: maxlength=<span class="number">33554432</span>, tlength=<span class="number">33554432</span>, base=<span class="number">4</span>, prebuf=<span class="number">0</span>, minreq=<span class="number">4</span> maxrewind=<span class="number">0</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>: Created <span class="selector-tag">input</span> <span class="number">1</span> <span class="string">&quot;ALSA Playback&quot;</span> on output with sample spec s16le <span class="number">2ch</span> <span class="number">44100Hz</span> and channel map front-<span class="attribute">left</span>,front-righ</span><br><span class="line">t</span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     media<span class="selector-class">.name</span> = <span class="string">&quot;ALSA Playback&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     application<span class="selector-class">.name</span> = <span class="string">&quot;ALSA plug-in [mpg123.bin]&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     native-protocol<span class="selector-class">.peer</span> = <span class="string">&quot;TCP/IP client from 10.10.10.1:57842&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     native-protocol<span class="selector-class">.version</span> = <span class="string">&quot;1073741857&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     application<span class="selector-class">.process</span><span class="selector-class">.id</span> = <span class="string">&quot;10381&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     application<span class="selector-class">.process</span><span class="selector-class">.user</span> = <span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     application<span class="selector-class">.process</span><span class="selector-class">.host</span> = <span class="string">&quot;yyyyyy&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     application<span class="selector-class">.process</span><span class="selector-class">.binary</span> = <span class="string">&quot;mpg123.bin&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     application<span class="selector-class">.language</span> = <span class="string">&quot;C&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     window<span class="selector-class">.x11</span><span class="selector-class">.display</span> = <span class="string">&quot;172.18.0.209:0&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     application<span class="selector-class">.process</span><span class="selector-class">.machine_id</span> = <span class="string">&quot;5cb9f590ef094000838e27092969d95b&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/sink-<span class="selector-tag">input</span><span class="selector-class">.c</span>:     module-stream-restore<span class="selector-class">.id</span> = <span class="string">&quot;sink-input-by-application-name:ALSA plug-in [mpg123.bin]&quot;</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/protocol-native<span class="selector-class">.c</span>: Requested tlength=<span class="number">200.00</span> ms, minreq=<span class="number">66.67</span> ms</span><br><span class="line">D: <span class="selector-attr">[(null)]</span> pulsecore/protocol-native<span class="selector-class">.c</span>: Early requests mode enabled, configuring sink latency to minreq.</span><br><span class="line">D: <span class="selector-attr">[(null)]</span> pulsecore/memblockq<span class="selector-class">.c</span>: memblockq requested: maxlength=<span class="number">4194304</span>, tlength=<span class="number">132300</span>, base=<span class="number">4</span>, prebuf=<span class="number">11760</span>, minreq=<span class="number">44100</span> maxrewind=<span class="number">0</span></span><br><span class="line">D: <span class="selector-attr">[(null)]</span> pulsecore/memblockq<span class="selector-class">.c</span>: memblockq sanitized: maxlength=<span class="number">4194304</span>, tlength=<span class="number">132300</span>, base=<span class="number">4</span>, prebuf=<span class="number">11760</span>, minreq=<span class="number">44100</span> maxrewind=<span class="number">0</span></span><br><span class="line">I: <span class="selector-attr">[(null)]</span> pulsecore/protocol-native<span class="selector-class">.c</span>: Final latency <span class="number">1000.00</span> ms = <span class="number">250.00</span> ms + <span class="number">2</span>*<span class="number">250.00</span> ms + <span class="number">250.00</span> ms</span><br></pre></td></tr></table></figure>
<h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> reference</h2>
<ul>
<li>Download the latest pulse audio release from <a href="http://www.freedesktop.org/wiki/Software/PulseAudio/Ports/Windows/Support/">http://www.freedesktop.org/wiki/Software/PulseAudio/Ports/Windows/Support/</a> (latest is v1.1 at the time of writing).</li>
<li>unpack to somewhere you want. example: c:\pulse\</li>
<li>open c:\pulse\etc\default.pa</li>
<li>make sure you have something similar to:<br />
load-module module-native-protocol-tcp listen=0.0.0.0 auth-anonymous=1<br />
set-default-sink output</li>
<li>On your linux machine(s), open /etc/pulse/client.conf (you could possibly do the same with ~/.pulse/client.conf), make sure default-server is uncommented and set to the ip address of your windows machine (one you want to receive audio on)</li>
<li>restart pulseaudio on the linux machine(s). For ubuntu: pulseaudio -k, and for other distros, sudo service pulseaudio restart.</li>
<li>On your windows machine, launch pulseaudio.exe. This should open a simple terminal with a few warnings (nothing to worry about).</li>
<li>On your Linux machine(s), launch something that plays sound.</li>
</ul>
]]></content></entry><entry><title>wine tricks</title><url>/2021-wine-tricks/</url><content><![CDATA[<p>Here are some keynotes from wine usage.</p>
<span id="more"></span>
<h2 id="installation"><a class="markdownIt-Anchor" href="#installation"></a> installation</h2>
<p>unlike windows, 32 bit exe binary (PE/COFF) cannot be executed under 64 bit wine system.<br />
on ubuntu, apt package manager provides both 32-bits and 64-bits binary.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo dpkg --add-architecture i386</span><br><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>
<p>but on centos, since version7, only wine x86-64 will be installed through <code>yum install wine</code><br />
thus we need to build from source to get wine 32-bit working.</p>
<p>reference this script <code>https://github.com/zma/usefulscripts/blob/master/script/install-wine-5.0-centos7.sh</code><br />
to build from source</p>
<h2 id="assitant-tools"><a class="markdownIt-Anchor" href="#assitant-tools"></a> assitant tools</h2>
<p>winecfg is included in wine package<br />
winetricks could be downloaded here <code>https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks</code></p>
<h2 id="switch-between-32-and-64-bits"><a class="markdownIt-Anchor" href="#switch-between-32-and-64-bits"></a> Switch between 32 and 64 bits</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/.wine</span><br><span class="line">$ <span class="built_in">mkdir</span> -p ~/.wine32</span><br></pre></td></tr></table></figure>
<p>we can switch between these 2 different location by setting WINEPREFIX and WINEARCH environment variables.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> WINEARCH=win32</span><br><span class="line">$ <span class="built_in">export</span> WINEPREFIX=~/.wine32</span><br><span class="line">$ winecfg</span><br></pre></td></tr></table></figure>
<p>above will create the 32-bit wine system under ~/.wine32.<br />
by <code>unset WINEARCH</code> and <code>unset WINEPREFIX</code> will return to 64-bit wine system under ~/.wine</p>
<h2 id="customize"><a class="markdownIt-Anchor" href="#customize"></a> customize</h2>
<p>1 change windows theme by using winecfg (theme package could be downloaded from Internet)<br />
2 display chinese<br />
* install chinese fonts by using winetricks<br />
* change locale by running wine: <code>LC_ALL=zh_CN wine xxx</code></p>
]]></content></entry><entry><title>use pyenv to manage multiple versions of python</title><url>/2021-use-pyenv-to-manage-multiple-versions-of-python/</url><content><![CDATA[<p>Here are some keynotes from python version management system - pyenv</p>
<span id="more"></span>
<h2 id="installation"><a class="markdownIt-Anchor" href="#installation"></a> installation</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure>
<p>install necessary packages based on your linux distribution,<br />
refer <a href="https://github.com/pyenv/pyenv/wiki#suggested-build-environment">https://github.com/pyenv/pyenv/wiki#suggested-build-environment</a></p>
<h2 id="mirror-the-download-site"><a class="markdownIt-Anchor" href="#mirror-the-download-site"></a> mirror the download site</h2>
<p>follow <a href="https://yyuu.github.io/pythons/">pyenv mirror guide</a> to build the site, remember the filename of the archieves must be the md5sum of its contents.<br />
Which means most of the public mirror sites does not work in pyenv need.</p>
<p>a solution for this case: download the archieves from the public mirror sites and place them under $(pyenv root)/cache,</p>
<h2 id="customize-the-build"><a class="markdownIt-Anchor" href="#customize-the-build"></a> customize the build</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">env</span> PYTHON_CONFIGURE_OPTS=<span class="string">&quot;--enable-shared --enable-unicode=ucs4 --enable-optimizations&quot;</span> pyenv install 2.7.18</span><br><span class="line">$ find $(pyenv root)/versions/2.7.18 -<span class="built_in">exec</span> file &#123;&#125; + | grep -i <span class="string">&#x27;elf.*not stripped&#x27;</span> | awk -F: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs strip</span><br><span class="line">$ readelf -d $(pyenv root)/versions/2.7.18/bin/python</span><br><span class="line">$ <span class="built_in">env</span> PYTHON_CONFIGURE_OPTS=<span class="string">&quot;--enable-shared --enable-optimizations LDFLAGS=-s&quot;</span> pyenv install 3.7.9</span><br><span class="line">$ pyenv SHELL 3.7.9</span><br><span class="line">$ python -c <span class="string">&quot;import sysconfig; abc=sysconfig.get_config_vars(); import pprint; pp=pprint.PrettyPrinter(indent=4); pp.pprint(abc);&quot;</span> | vi -</span><br></pre></td></tr></table></figure>
<ul>
<li>–enable-optimizations: expensive optimizations that slow down the build process but yield a significant speed boost</li>
<li>–enable-shared:        some extension required python shared library. rpath will be set in this case.</li>
<li>–enable-unicode:       python version 2.2 through 3.2 depends on this to representation of unicode strings. utf-16 UCS2/utf-32 UCS4<br />
python -c “import sys; print(sys.maxunicode)”      UCS4: 1114111/UCS2: 65535<br />
python 3.7.9 will always returns 1114111</li>
<li>LDFLAGS=-s:             strip all symbols</li>
</ul>
<h2 id="install-specific-version-for-docker-image"><a class="markdownIt-Anchor" href="#install-specific-version-for-docker-image"></a> install specific version for docker image</h2>
<p>use python-build plugin</p>
<h2 id="windows-version"><a class="markdownIt-Anchor" href="#windows-version"></a> windows version</h2>
<ul>
<li>
<p>clone <a href="https://github.com/pyenv-win/pyenv-win">pyenv-win</a> and make symbol link C:\python using <code>mklink /D</code></p>
</li>
<li>
<p>need script to generate regedit entry</p>
</li>
</ul>
]]></content><categories><category>programming</category></categories></entry><entry><title>Using Openstack API with Trystack</title><url>/2016-using-openstack-api-with-trystack/</url><content><![CDATA[<p>Trystack has STOPPED its service already.</p>
<p>In <a href="/getting-started-with-trystack/">last post</a>, we used Horizon, canonical implementation of OpenStack’s Dashboard, to request VM resource from <a href="//www.trystack.org">Trystack</a>. And finally we can connect to the VM using SSH with allocated public floating IP.</p>
<p>Using GUI is always the first step to start, to improve the productivity and flexibility, Openstack provides API interface as well, for writing software that manages a cloud. With that RESTful API, many software packages are developed to support Openstack operation like python-openstackclient, shade(python), pkgcloud(nodejs), Fog(ruby), ansible etc…</p>
<span id="more"></span>
<h2 id="request-api-password"><a class="markdownIt-Anchor" href="#request-api-password"></a> Request API password</h2>
<p>First, we need get system information for the API access</p>
<p><img src="/upload/trystack.apiaccess.jpg" alt="trystack api access" /></p>
<p>Rename the downloaded file as <code>trystackrc.sh</code>, which includes already defined parameters like USERNAME/TENANT_NAME/PROJECT_NAME. But for keystone password, above bash script leaves blank and requires an input. See code snippet below:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># With Keystone you pass the keystone password.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Please enter your OpenStack Password: &quot;</span></span><br><span class="line"><span class="built_in">read</span> -sr OS_PASSWORD_INPUT</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=<span class="variable">$OS_PASSWORD_INPUT</span></span><br></pre></td></tr></table></figure>
<p>To get access with your resources in the cloud, a new API password needs to be generated.</p>
<p><img src="/upload/trystack.settings.jpg" alt="trystack settings" /></p>
<p><img src="/upload/trystack.apipwd.jpg" alt="trystack api password" /></p>
<p>Copy above generated “zeUC6PMLaD9eijcv”. This code cannot be recovered by Horizon Dash Board. Once lost, a new one needs to be regenerated.</p>
<h2 id="rest-api-usage"><a class="markdownIt-Anchor" href="#rest-api-usage"></a> REST API Usage</h2>
<p>Source above saved <code>trystackrc.sh</code> in BASH shell, when prompt with “Please enter your OpenStack Password:”, enter generated “zeUC6PMLaD9eijcv” got from previous step.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source trystackrc.sh</span></span><br><span class="line">Please enter your OpenStack Password:</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="request-token"><a class="markdownIt-Anchor" href="#request-token"></a> Request Token</h3>
<p>Authenticate by exchanging credentials for an access token. OS_TENANT_NAME, OS_USERNAME and OS_PASSWORD are already defined in <code>trystackrc.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s -H &quot;Content-Type: application/json&quot; -d &#x27;&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line">&gt;     <span class="string">&quot;tenantName&quot;</span>: <span class="string">&quot;&#x27;&quot;</span><span class="variable">$OS_TENANT_NAME</span><span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">&gt;     <span class="string">&quot;passwordCredentials&quot;</span>: &#123;</span><br><span class="line">&gt;       <span class="string">&quot;username&quot;</span>: <span class="string">&quot;&#x27;&quot;</span><span class="variable">$OS_USERNAME</span><span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">&gt;       <span class="string">&quot;password&quot;</span>: <span class="string">&quot;&#x27;&quot;</span><span class="variable">$OS_PASSWORD</span><span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; &#125;<span class="string">&#x27; $OS_AUTH_URL/tokens | python -m json.tool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;access&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;metadata&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;is_admin&quot;: 0,</span></span><br><span class="line"><span class="string">            &quot;roles&quot;: [</span></span><br><span class="line"><span class="string">                &quot;9fe2ff9ee4384b1894a90878d3e92bab&quot;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;serviceCatalog&quot;: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;endpoints&quot;: [</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        &quot;adminURL&quot;: &quot;http://172.16.1.2:8774/v2/1486ae3077d24750ad828e4766b0dc22&quot;,</span></span><br><span class="line"><span class="string">                        &quot;id&quot;: &quot;042657bef487444d91d1efaca4e0cd0e&quot;,</span></span><br><span class="line"><span class="string">                        &quot;internalURL&quot;: &quot;http://172.16.1.2:8774/v2/1486ae3077d24750ad828e4766b0dc22&quot;,</span></span><br><span class="line"><span class="string">                        &quot;publicURL&quot;: &quot;http://8.43.86.2:8774/v2/1486ae3077d24750ad828e4766b0dc22&quot;,</span></span><br><span class="line"><span class="string">                        &quot;region&quot;: &quot;RegionOne&quot;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                ],</span></span><br><span class="line"><span class="string">                &quot;endpoints_links&quot;: [],</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;nova&quot;,</span></span><br><span class="line"><span class="string">                &quot;type&quot;: &quot;compute&quot;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            ......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        &quot;token&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;audit_ids&quot;: [</span></span><br><span class="line"><span class="string">                &quot;Q5A7e10HRauzbeLacJUliQ&quot;</span></span><br><span class="line"><span class="string">            ],</span></span><br><span class="line"><span class="string">            &quot;expires&quot;: &quot;2016-08-19T04:23:37Z&quot;,</span></span><br><span class="line"><span class="string">            &quot;id&quot;: &quot;ef4fe7bc85a04053af7fcc65b1b90093&quot;,</span></span><br><span class="line"><span class="string">            &quot;issued_at&quot;: &quot;2016-08-19T03:23:37.990563&quot;,</span></span><br><span class="line"><span class="string">            &quot;tenant&quot;: &#123;</span></span><br><span class="line"><span class="string">                &quot;description&quot;: &quot;Auto created account&quot;,</span></span><br><span class="line"><span class="string">                &quot;enabled&quot;: true,</span></span><br><span class="line"><span class="string">                &quot;id&quot;: &quot;1486ae3077d24750ad828e4766b0dc22&quot;,</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;facebook10154005392873346&quot;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;id&quot;: &quot;7508dbabb3984adb9fb0028a413ff53f&quot;,</span></span><br><span class="line"><span class="string">            &quot;name&quot;: &quot;facebook10154005392873346&quot;,</span></span><br><span class="line"><span class="string">            &quot;roles&quot;: [</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;: &quot;_member_&quot;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            ],</span></span><br><span class="line"><span class="string">            &quot;roles_links&quot;: [],</span></span><br><span class="line"><span class="string">            &quot;username&quot;: &quot;facebook10154005392873346&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Take note of the value [‘access’][‘token’][‘id’] value produced here (ef4fe7bc85a04053af7fcc65b1b90093 in this case), as you can use it in the calls below. Also pay attention of [‘access’][‘token’][‘expires’] and [‘access’][‘token’][‘issued_at’], the requested token is valid in ONE HOUR once it is accquired.</p>
<p>In section of [‘access’][‘serviceCatalog’], find publicURL with type of “compute”. It can be used with compute API calls below. For others like <strong>identity</strong>, <strong>volume</strong>, <strong>image</strong>, <strong>network</strong> etc, use this kind of way for the API public URLs.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export OS_TOKEN=&quot;ef4fe7bc85a04053af7fcc65b1b90093&quot;</span></span><br><span class="line"><span class="comment"># export OS_COMPUTE=&quot;http://8.43.86.2:8774/v2/1486ae3077d24750ad828e4766b0dc22&quot;</span></span><br><span class="line"><span class="comment"># export OS_NETWORK=&quot;http://8.43.86.2:9696&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="compute-api"><a class="markdownIt-Anchor" href="#compute-api"></a> Compute API</h3>
<p>For the complete API list and parameters definition, move to <a href="http://developer.openstack.org/api-ref.html">Openstack API Ref</a> site for more information. Here we use compute API to demo the keypairs operations.</p>
<p>Show the keypairs in our Tenant.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  curl -s -H &quot;X-Auth-Token: $OS_TOKEN&quot; $OS_COMPUTE/os-keypairs | python -m json.tool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;keypairs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;keypair&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;fingerprint&quot;</span>: <span class="string">&quot;56:ff:f1:07:fb:4f:01:df:b2:81:a8:c7:b0:84:35:f8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;trystack&quot;</span>,</span><br><span class="line">                <span class="string">&quot;public_key&quot;</span>: <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDOMrdZe40QNF86f2/cB/3SOZebo9MR26oPKzVrDKNliU2mr7Xa3uKZ513ngtRVtEyfhMdVq4+9nVHfO5oFGhaHGTEB6WlhUzG6iXSQH2Em+RC4qxCsMKEbnFbXCW36hiYyVTiL0uf00g2+DG94vj2EN/QOWAoqONTAA8+iMEEHC8LZXhKkduYwjruNq/PdF4d9TdchDiQ6VXLrn7buDjxxE+Y+Oa7pykQ0CU2IH2PeI7fnGLt/LQRTQiDUPclYMkgLIUkBL0Qec3HIXwiFUygmCpz7SsjDF8a8n00+KT6qQcOvMsBLnm8DavXVKazOgoEdLsdx4RiacOovRjUMyk11 Generated-by-Nova&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Create a new one named as <strong>wangkexiong</strong> with auto-generated SSH keys. The private_key need to be saved for later SSH connection used.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s -H &quot;X-Auth-Token: $OS_TOKEN&quot; \</span></span><br><span class="line">&gt;         -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123; &quot;keypair&quot;: &#123;</span></span><br><span class="line"><span class="string">&gt;     &quot;name&quot;: &quot;wangkexiong&quot;</span></span><br><span class="line"><span class="string">&gt;     &#125;</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> <span class="variable">$OS_COMPUTE</span>/os-keypairs | python -m json.tool</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;keypair&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;fingerprint&quot;</span>: <span class="string">&quot;c2:01:fb:38:ad:70:ad:9f:89:62:1b:fa:6a:f8:8b:a1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;wangkexiong&quot;</span>,</span><br><span class="line">        <span class="string">&quot;private_key&quot;</span>: <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----\nMIIEqAIBAAKCAQEAqKqkXBBjz7KEzJM/+fu6VRc9lERRLlVdTBvUnhSsKHdgKj5l\nBqsiEG3Nq6ZOVq6EfSoPQluLUf7faYiuCm50Xwdsr+uS1ES2pIrR9395ET65xOKS\niHUQPm4aHteOAttTIya3Zkj4HOod8Zqa38XG+em/HktxpRRUD84O+tLd0x6nZ8Yp\n9cyaMB5IieWuypswVjY4nx067CtNoldjJlAkQEfxkIPfn4NCpR/nkN9pGFZ2/L3L\norwXBx7NQEhqlnMu+sZfZzG+ag+TMtmRcABBLd4g2INOyi1zTO9wKdC3gh5RTtxL\nUbT20iLf0NBoezfO0gaTlP6ipO8L6znoG9LumwIDAQABAoIBAQCI30lXyJkm0CjC\nVvBA7c2NBbocGsCCSBXZEHCfBAmdIRqxzUZwfem7yU9w7xl9cEvlwn71i5JorNsi\nKh+KKY5YG49Qx2u0xDovFtRC83gMzYk1Q+RDxjOzZefehXAh01gJG38TCz4FQNuh\n16O82iOZZN2KORD1NKTu2nn/g6Utj81WECtL+mdE8h8JEPeXWoLEnPHstre/p5Mu\nSEYXDi412fiMlsbKyatNr8oIr155+4Dyjdf+kPuOeB+Z5cG0R0Gv0AFCOY9oCfKw\nBVcSBC0EpbOW97a4U1GVXD5IeAdMJVetGid1bOjIz98Qvywdyx+SBAwzClWdTuy1\n0ns7M96JAoIAgQC/znT+O++JjsTIU2E/ikAslgP9f6G8YiDDdRX8IPJMDPfwvrp+\nKkZPj4zi1YuGRpxostwT0jlbOGx1/PW7lyTKxceNGU1DWQkpexiQ9gqG1aqDKEWZ\na3uaDvF7y2DLRl5xoAv49zVmU0ntXtFjAVX5Krg0xrQsyACRxeV4/Xe5hQKCAIEA\n4R2cWilsmrhhcrg5RbkjGEewnkPOq6eueyZGC7S7sr24kjwUCsg6Ag2BnSzYGD5M\nAiONYbUY9uk5y1oJV1ZUtjmeLxglI2sNL90Y8gATByaTOM/kw848CrGIbZ6HQpVJ\n1heTuwlEfwJXYrk+1yBc8xBTWfGWEGAeMaZe/DI3cZ8CggCAS7Lmt4PeGNMQ1OMb\naWFdzHr0XjLmGRw9RAbMw3IZTmx72jbcEXkLwNCt0MRoyXjKuAOHGgeI/Xh6TeKk\n9QFE0wZVqFlJBgB4vjdHzcZdBzQClLrrJQ6nfHjTU4FD1VYTZhK9RugB2j2a2qTm\nTIW1cZ4rjyCw8U+J8f5Bf4vBmaUCggCAWdkEp2OzKgl/M1dd3HspC67JSlGL8i0J\n0bMT7+YhqBRaz1rVMPx7Uohre/0C/qIWmh/wdNff7+RkIcp8wfP9+YEDpo4/fGRk\nrf7TzvrCnW8DAYDQMGpmwmnbJs1H9QY6ow1j9Bmd0gdwM0H2V8xd7NFOQy7OExkZ\n0/0wGf487McCggCANsXlOZTrUW+CcT2DED1rByVOKKBOgrfPRpmBZRsMGBYUqUuv\nb6ZDQvZd30UWzeJuaX4ma6twwHSZ23HqG4v2Cc35AikD0jph6Ro82ZjA5SiAlK1X\neNU6NUh4tlrQN9j/sCaiSbMkm2LP/CU3s4Onah0/IE4HFbTLibgre8QVaws=\n-----END RSA PRIVATE KEY-----\n&quot;</span>,</span><br><span class="line">        <span class="string">&quot;public_key&quot;</span>: <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCoqqRcEGPPsoTMkz/5+7pVFz2URFEuVV1MG9SeFKwod2AqPmUGqyIQbc2rpk5WroR9Kg9CW4tR/t9piK4KbnRfB2yv65LURLakitH3f3kRPrnE4pKIdRA+bhoe144C21MjJrdmSPgc6h3xmprfxcb56b8eS3GlFFQPzg760t3THqdnxin1zJowHkiJ5a7KmzBWNjifHTrsK02iV2MmUCRAR/GQg9+fg0KlH+eQ32kYVnb8vcuivBcHHs1ASGqWcy76xl9nMb5qD5My2ZFwAEEt3iDYg07KLXNM73Ap0LeCHlFO3EtRtPbSIt/Q0Gh7N87SBpOU/qKk7wvrOegb0u6b Generated-by-Nova&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;7508dbabb3984adb9fb0028a413ff53f&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can use already generated SSH key for this keypairs. Try delete above generated one first.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s -X DELETE -H &quot;X-Auth-Token: $OS_TOKEN&quot; $OS_COMPUTE/os-keypairs/wangkexiong</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># curl -s -H &quot;X-Auth-Token: $OS_TOKEN&quot; \</span></span><br><span class="line">&gt;         -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123; &quot;keypair&quot;: &#123;</span></span><br><span class="line"><span class="string">&gt;     &quot;name&quot;: &quot;wangkexiong&quot;,</span></span><br><span class="line"><span class="string">&gt;     &quot;public_key&quot;: &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDunXwWmH8ooWOdrUxiCmeo9ZEqO8YqWmZ3JfC18AgWvdr75zGD0UN0WsKPfCA2lBVW36TL2zuPr9eDPbhTdX/Dblxv7RQ8Rc6FxHk7s83fD2eUw1AKicU27j5x3XoU6MUx/mlaXJAklwDzC//1DtNslNCIiXeFOM44UBFRZbnyb5lbCZkjs1KgaHDrb06RzndhYRJ7ANbysv4+iwvH6mVeN+aBZ0A3K7R55HJQ3f2R2vGz1AvCL6VgJNT0mA12CC3eJ2x2iaTW6Vp185Galmv4XcUdOG2zIFzmPZ/mgEFpxnNWRrHsFB3SGnjMrne3z8dG593n5o9Pp68e10vpnE63 wangkexiong@gmail.com&quot;</span></span><br><span class="line"><span class="string">&gt;     &#125;</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> <span class="variable">$OS_COMPUTE</span>/os-keypairs | python -m json.tool</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;keypair&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;fingerprint&quot;</span>: <span class="string">&quot;79:b8:93:e1:1d:1b:cc:cb:b6:92:b7:fb:59:4a:53:7e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;wangkexiong&quot;</span>,</span><br><span class="line">        <span class="string">&quot;public_key&quot;</span>: <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDunXwWmH8ooWOdrUxiCmeo9ZEqO8YqWmZ3JfC18AgWvdr75zGD0UN0WsKPfCA2lBVW36TL2zuPr9eDPbhTdX/Dblxv7RQ8Rc6FxHk7s83fD2eUw1AKicU27j5x3XoU6MUx/mlaXJAklwDzC//1DtNslNCIiXeFOM44UBFRZbnyb5lbCZkjs1KgaHDrb06RzndhYRJ7ANbysv4+iwvH6mVeN+aBZ0A3K7R55HJQ3f2R2vGz1AvCL6VgJNT0mA12CC3eJ2x2iaTW6Vp185Galmv4XcUdOG2zIFzmPZ/mgEFpxnNWRrHsFB3SGnjMrne3z8dG593n5o9Pp68e10vpnE63 wangkexiong@gmail.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;7508dbabb3984adb9fb0028a413ff53f&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># curl -s -H &quot;X-Auth-Token: $OS_TOKEN&quot; $OS_COMPUTE/os-keypairs | python -m json.tool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;keypairs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;keypair&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;fingerprint&quot;</span>: <span class="string">&quot;56:ff:f1:07:fb:4f:01:df:b2:81:a8:c7:b0:84:35:f8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;trystack&quot;</span>,</span><br><span class="line">                <span class="string">&quot;public_key&quot;</span>: <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDOMrdZe40QNF86f2/cB/3SOZebo9MR26oPKzVrDKNliU2mr7Xa3uKZ513ngtRVtEyfhMdVq4+9nVHfO5oFGhaHGTEB6WlhUzG6iXSQH2Em+RC4qxCsMKEbnFbXCW36hiYyVTiL0uf00g2+DG94vj2EN/QOWAoqONTAA8+iMEEHC8LZXhKkduYwjruNq/PdF4d9TdchDiQ6VXLrn7buDjxxE+Y+Oa7pykQ0CU2IH2PeI7fnGLt/LQRTQiDUPclYMkgLIUkBL0Qec3HIXwiFUygmCpz7SsjDF8a8n00+KT6qQcOvMsBLnm8DavXVKazOgoEdLsdx4RiacOovRjUMyk11 Generated-by-Nova&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;keypair&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;fingerprint&quot;</span>: <span class="string">&quot;79:b8:93:e1:1d:1b:cc:cb:b6:92:b7:fb:59:4a:53:7e&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;wangkexiong&quot;</span>,</span><br><span class="line">                <span class="string">&quot;public_key&quot;</span>: <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDunXwWmH8ooWOdrUxiCmeo9ZEqO8YqWmZ3JfC18AgWvdr75zGD0UN0WsKPfCA2lBVW36TL2zuPr9eDPbhTdX/Dblxv7RQ8Rc6FxHk7s83fD2eUw1AKicU27j5x3XoU6MUx/mlaXJAklwDzC//1DtNslNCIiXeFOM44UBFRZbnyb5lbCZkjs1KgaHDrb06RzndhYRJ7ANbysv4+iwvH6mVeN+aBZ0A3K7R55HJQ3f2R2vGz1AvCL6VgJNT0mA12CC3eJ2x2iaTW6Vp185Galmv4XcUdOG2zIFzmPZ/mgEFpxnNWRrHsFB3SGnjMrne3z8dG593n5o9Pp68e10vpnE63 wangkexiong@gmail.com&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="cli-tool-based-on-rest-api"><a class="markdownIt-Anchor" href="#cli-tool-based-on-rest-api"></a> CLI Tool based on REST API</h2>
<p>With the REST API Openstack provided, we can make text-based client that helps creating scripts to interact with OpenStack clouds. The community developed python packages for such purpose, here is the way to <a href="http://docs.openstack.org/cli-reference/common/cli-install-openstack-command-line-clients.html">install openstack command line clients</a>. For docker user, try the following way.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -it wangkexiong/openstackcli /bin/sh</span></span><br></pre></td></tr></table></figure>
<p>Again we can rewrite the <code>trystackrc.sh</code> and put the Trystack API password in. For the security consideration, periodically renew the password on Trystack website and update in <code>trystackrc.sh</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://8.43.86.2:5000/v2.0</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> OS_TENANT_ID=1486ae3077d24750ad828e4766b0dc22</span><br><span class="line"><span class="built_in">export</span> OS_TENANT_NAME=<span class="string">&quot;facebook10154005392873346&quot;</span></span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=<span class="string">&quot;facebook10154005392873346&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> OS_USERNAME=<span class="string">&quot;facebook10154005392873346&quot;</span></span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=<span class="string">&quot;zeUC6PMLaD9eijcv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> OS_REGION_NAME=<span class="string">&quot;RegionOne&quot;</span></span><br></pre></td></tr></table></figure>
<p>Now using CLI for keypairs operations:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source trystackrc.sh</span></span><br><span class="line"><span class="comment"># nova keypair-list</span></span><br><span class="line">+-------------+-------------------------------------------------+</span><br><span class="line">| Name        | Fingerprint                                     |</span><br><span class="line">+-------------+-------------------------------------------------+</span><br><span class="line">| trystack    | 56:ff:f1:07:fb:4f:01:<span class="built_in">df</span>:b2:81:a8:c7:b0:84:35:f8 |</span><br><span class="line">| wangkexiong | 79:b8:93:e1:1d:1b:cc:cb:b6:92:b7:fb:59:4a:53:7e |</span><br><span class="line">+-------------+-------------------------------------------------+</span><br><span class="line"><span class="comment"># nova keypair-delete wangkexiong</span></span><br><span class="line"><span class="comment"># nova keypair-list</span></span><br><span class="line">+----------+-------------------------------------------------+</span><br><span class="line">| Name     | Fingerprint                                     |</span><br><span class="line">+----------+-------------------------------------------------+</span><br><span class="line">| trystack | 56:ff:f1:07:fb:4f:01:<span class="built_in">df</span>:b2:81:a8:c7:b0:84:35:f8 |</span><br><span class="line">+----------+-------------------------------------------------+</span><br><span class="line"><span class="comment"># nova keypair-add --pub-key trystack/roles/infrastructure/files/ansible_id.pub wangkexiong</span></span><br><span class="line"><span class="comment"># nova keypair-list</span></span><br><span class="line">+-------------+-------------------------------------------------+</span><br><span class="line">| Name        | Fingerprint                                     |</span><br><span class="line">+-------------+-------------------------------------------------+</span><br><span class="line">| trystack    | 56:ff:f1:07:fb:4f:01:<span class="built_in">df</span>:b2:81:a8:c7:b0:84:35:f8 |</span><br><span class="line">| wangkexiong | 79:b8:93:e1:1d:1b:cc:cb:b6:92:b7:fb:59:4a:53:7e |</span><br><span class="line">+-------------+-------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>If you use tcpdump or other snoop tools to track the HTTP request, a clear HTTP REST API calling sequence will help you understand APIs much better.</p>
<p>-EOF-</p>
]]></content><categories><category>cloud</category></categories><tags><tag>openstack</tag><tag>trystack</tag><tag>cloud</tag></tags></entry><entry><title>Getting Started with Trystack</title><url>/2016-getting-started-with-trystack/</url><content><![CDATA[<p>Trystack has STOPPED its service already.</p>
<p>OpenStack is one of the most popular Cloud Operating System. However, it has become complex mass of multiple sub-projects. It contains 5-6 primary sub-projects and at least 5-7 more additional services along with new services and projects in the pipeline. As such, getting started with custom development can be fairly challenging.</p>
<p>To get a workable Openstack cloud, powerful hardware infrastructure and configuration for above sub-projects are the big stones in the road. You may get happiness to make it work from scratch, but <a href="http://www.trystack.org">Trystack</a> removes above complexity and makes it easy and free for everyone to experiment with the cloud.</p>
<span id="more"></span>
<h2 id="apply-an-account-for-trystack"><a class="markdownIt-Anchor" href="#apply-an-account-for-trystack"></a> Apply an account for Trystack</h2>
<p>In order to log in with the Facebook link, you must be a member of the <a href="http://www.facebook.com/groups/269238013145112">TryStack Facebook group</a>. Join in the group is a manual approval, so it may take a little time for you to get access to TryStack. Please be patient.</p>
<p><img src="/upload/trystack.jpg" alt="trystack website" /></p>
<p>When you got the approval, you may login with facebook account link.</p>
<p><img src="/upload/trystack.login.jpg" alt="trystack login" /></p>
<p><s>Above application is for x86 zone. To get an account for ARM zone, you’ll need to subscriber through a <a href="http://eepurl.com/nGEzj">newsletter</a></s></p>
<h2 id="create-key-pairs"><a class="markdownIt-Anchor" href="#create-key-pairs"></a> Create Key Pairs</h2>
<p>When launching a virtual machine, a key pair need to be injected, which provides SSH access to your instance. For this to work, the image must contain the cloud-init package.</p>
<p><img src="/upload/trystack.keypairs.jpg" alt="trystack keypairs" /></p>
<p>You can create at least one key pair for each project. You can use the key pair for multiple instances that belong to that project. If you generate a key pair with an external tool, you can import it into OpenStack. A key pair belongs to an individual user, not to a project. To share a key pair across multiple users, each user needs to import that key pair.</p>
<p>If you choose to create a totally new key pair, after downloading the private SSH key pem file, remember to change the file permission to <code>-r--------</code> (400). This is important for later use with SSH command line tool.</p>
<p>If you choose to re-use already created SSH key pairs, use “Import Key Pair” and paste the public key content in the right box.</p>
<p>For later reference, I created a new key pair named <code>trystack</code> and keep the downloaded <code>trystack.pem</code>.</p>
<h2 id="create-network"><a class="markdownIt-Anchor" href="#create-network"></a> Create Network</h2>
<p>This allows users to set up and define network connectivity and addressing in the cloud.</p>
<p><img src="/upload/trystack.network.jpg" alt="trystack network" /></p>
<ol>
<li>In <code>Network</code> tab</li>
</ol>
<ul>
<li>Naming the <code>Network Name</code> with <code>internal</code></li>
</ul>
<ol start="2">
<li>In <code>Subnet</code> tab</li>
</ol>
<ul>
<li>Naming the <code>Subnet Name</code> with <code>sub1</code></li>
<li>Filling <code>Network Address</code> with appropriate CIDR,<code>192.168.1.0/24</code>.</li>
<li>Keeping <code>IP Version</code> with <code>IPv4</code></li>
</ul>
<ol start="3">
<li>In <code>Subnet Details</code> tab</li>
</ol>
<ul>
<li>Filling <code>8.8.8.8</code> (Google public DNS) for <code>DNS Name Servers</code></li>
</ul>
<ol start="4">
<li>Submit with <code>Create</code> Button</li>
</ol>
<h2 id="create-instances"><a class="markdownIt-Anchor" href="#create-instances"></a> Create Instances</h2>
<p>An instance is a VM that OpenStack provisions on a compute node.</p>
<p><img src="/upload/trystack.instances.png" alt="trystack instances" /></p>
<ol>
<li>In <code>Detail</code> tab</li>
</ol>
<ul>
<li>Naming <code>Instance Name</code> with <code>beijing</code></li>
<li>Using <code>m1.small</code> with <code>Flavor</code></li>
<li>Filling <code>3</code> with <code>Instance Count</code> (Quota is max used now)</li>
<li>Using <code>Boot from image</code> with <code>Instance Boot Source</code></li>
<li>Using <code>Ubuntu 16.04 (289.3 MB)</code> with <code>Image Name</code></li>
</ul>
<ol start="2">
<li>In <code>Access &amp; Security</code> tab</li>
</ol>
<ul>
<li>Making sure <code>default</code> security group is checked</li>
</ul>
<ol start="3">
<li>In <code>Networking</code> tab</li>
</ol>
<ul>
<li>Making sure <code>internal</code> network is selected</li>
</ul>
<ol start="4">
<li>Submit with <code>Create</code> Button</li>
</ol>
<h2 id="create-router"><a class="markdownIt-Anchor" href="#create-router"></a> Create Router</h2>
<p>We already created network, but it is isolated from the Internet. To make our network has an internet connection, we need a router that running as the gateway to the Internet.</p>
<p><img src="/upload/trystack.router.jpg" alt="trystack router" /></p>
<p>But the router is still not connected with our <code>internal</code> network.</p>
<p><img src="/upload/trystack.interface.jpg" alt="trystack interface" /></p>
<p>Now the router is still not connected with outworld. Make it as the gateway.</p>
<p><img src="/upload/trystack.gateway.jpg" alt="trystack gateway" /></p>
<p>Until now the router connects both the private <code>internal</code> and the public <code>Internet</code></p>
<p><img src="/upload/trystack.topology.jpg" alt="trystack topology" /></p>
<h2 id="request-and-associate-floating-ip"><a class="markdownIt-Anchor" href="#request-and-associate-floating-ip"></a> Request and Associate Floating IP</h2>
<p>The created instances <code>beijing-1</code>, <code>beijing-2</code> and <code>beijing-3</code> already have their allocated IP from the <code>internal</code> DHCP pool. They can access the Internet with <code>router1</code> as gateway. However, we cannot access the instances created, they do not have public IP that we can acess from the Internet. We need request a public IP address and associcate it with the instances.</p>
<p><img src="/upload/trystack.floatingip.jpg" alt="trystack floatingip" /></p>
<p>The quota shows we can only allocate ONE from public pool. So only ONE instance can be associated with this public IP.</p>
<p><img src="/upload/trystack.associate.jpg" alt="trystack associate" /></p>
<h2 id="allow-ssh-connection-to-the-instance-vm"><a class="markdownIt-Anchor" href="#allow-ssh-connection-to-the-instance-vm"></a> Allow SSH connection to the instance VM</h2>
<p>A security group is a named collection of network access rules that are use to limit the types of traffic that have access to instances. When you launch an instance, you can assign one or more security groups to it. If you do not create security groups, new instances are automatically assigned to the default security group, unless you explicitly specify a different security group.</p>
<p><img src="/upload/trystack.secgroup.jpg" alt="trystack secgroup" /></p>
<p>The associated rules in each security group control the traffic to instances in the group. Any incoming traffic that is not matched by a rule is denied access by default. You can add rules to or remove rules from a security group, and you can modify rules for the default and any other security group.</p>
<p><img src="/upload/trystack.sshrule.jpg" alt="trystack ssh rule" /></p>
<p>With above settings, we can use the downloaded SSH private key named <code>trystack.pem</code> (step 2) and allocated public IP <code>8.43.86.142</code> (step 6) to connect with instance <code>beijing-1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -i trystack.pem ubuntu@8.43.86.142</span><br></pre></td></tr></table></figure>
<p>Now we have a VM with SSH connection in the trystack cloud. If you want to access <code>beijing-2</code> and <code>beijing-3</code>, try to SSH these instances from <code>beijing-1</code>.</p>
<h2 id="trystack-limitation"><a class="markdownIt-Anchor" href="#trystack-limitation"></a> Trystack Limitation</h2>
<p>There is something more need to mention here. <a href="http://www.trystack.org">TryStack</a> resembles the type of cloud environment you can create on your own with OpenStack Software. However, there is a few sensible limits in place for the good of the project. First, the server instances you launch are only available for <strong>24 hours</strong> until the hardware is reclaimed for use by new instances. And more, when you first get your account, it will be preloaded with a limited quota. As a user account rather than admin, Keystone is NOT allowed to use for quota changing. This is something like you can only allocate ONE public IP, no more than 3 VMs etc…</p>
<p>-EOF-</p>
]]></content><categories><category>cloud</category></categories><tags><tag>openstack</tag><tag>trystack</tag><tag>cloud</tag></tags></entry><entry><title>Docker Notes</title><url>/2016-docker-notes/</url><content><![CDATA[<p>Docker is really HOT.</p>
<span id="more"></span>
<p>Windows joined already, we can now run windows containers as well. However we will not discuss it in this post.<br />
And Docker-toolbox had changed its name to Docker-desktop and has its pay plan. It is no long FREE for use in COMPANY.</p>
<h2 id="docker-with-windows"><a class="markdownIt-Anchor" href="#docker-with-windows"></a> Docker with Windows</h2>
<h3 id="installation"><a class="markdownIt-Anchor" href="#installation"></a> Installation</h3>
<p>~Generally speaking there is no Windows version of Docker Server available.~<br />
What we install through Docker-toolbox is the Docker client. The Server is actually started by <a href="https://github.com/boot2docker/boot2docker.git">boot2docker</a> on virtualbox.</p>
<p>Only docker client with its SHELL are running on Windows platform. Everything else including image and container are all in the virtual machine. Be clear with this can help with your backup procedure with toolbox upgrade.</p>
<p>The installation package can be got from <a href="https://www.docker.com/products/docker-toolbox">docker-toolbox</a> official site.</p>
<h3 id="private-registry"><a class="markdownIt-Anchor" href="#private-registry"></a> Private registry</h3>
<p>With the first start, toolbox will create a virtual machine named as <code>default</code>. If you want to add private registry support, add the following configuration in the startup script on the top to specify your private registry. If you have multiple registries, repeat the line with different destination. Usually the script is <code>C:\Docker\start.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENGINE_OPT=<span class="string">&quot;--engine-insecure-registry docker-repo01.pl-lab.lucent.com:6000 &quot;</span><span class="variable">$ENGINE_OPT</span></span><br></pre></td></tr></table></figure>
<p>We need to add the parameters when creating virtual machine <code>default</code>. Find the section in above <code>C:\Docker\start.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$VM_EXISTS_CODE</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="string">&quot;<span class="variable">$&#123;DOCKER_MACHINE&#125;</span>&quot;</span> <span class="built_in">rm</span> -f <span class="string">&quot;<span class="variable">$&#123;VM&#125;</span>&quot;</span> &amp;&gt; /dev/null || :</span><br><span class="line">  <span class="built_in">rm</span> -rf ~/.docker/machine/machines/<span class="string">&quot;<span class="variable">$&#123;VM&#125;</span>&quot;</span></span><br><span class="line">  <span class="string">&quot;<span class="variable">$&#123;DOCKER_MACHINE&#125;</span>&quot;</span> create -d virtualbox <span class="string">&quot;<span class="variable">$&#123;VM&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>And replace the line doing create</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;<span class="variable">$&#123;DOCKER_MACHINE&#125;</span>&quot;</span> create -d virtualbox <span class="variable">$ENGINE_OPT</span> <span class="string">&quot;<span class="variable">$&#123;VM&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="behind-proxy"><a class="markdownIt-Anchor" href="#behind-proxy"></a> Behind Proxy</h3>
<p>Like private registry, docker-machine support to add proxy configurations. Add the following on top of startup script <code>C:\Docker\start.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENGINE_OPT=<span class="string">&quot;--engine-env http_proxy=192.168.56.1:3939 &quot;</span><span class="variable">$ENGINE_OPT</span></span><br><span class="line">ENGINE_OPT=<span class="string">&quot;--engine-env https_proxy=192.168.56.1:3939 &quot;</span><span class="variable">$ENGINE_OPT</span></span><br><span class="line">ENGINE_OPT=<span class="string">&quot;--engine-env no_proxy=.alcatel-sbell.com.cn,.lucent.com &quot;</span><span class="variable">$ENGINE_OPT</span></span><br></pre></td></tr></table></figure>
<p>If you does not do above step for private registry, find the line and replace with</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;<span class="variable">$&#123;DOCKER_MACHINE&#125;</span>&quot;</span> create -d virtualbox <span class="variable">$ENGINE_OPT</span> <span class="string">&quot;<span class="variable">$&#123;VM&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="change-terminal"><a class="markdownIt-Anchor" href="#change-terminal"></a> Change Terminal</h3>
<p>By default, the terminal is Windows Command shell. We can change it to use <code>mintty</code> which support <code>Copy on Select with Mouse</code></p>
<p>Still in startup script <code>C:\Docker\start.sh</code></p>
<p>Replace the line</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="string">&quot;<span class="variable">$&#123;BASH&#125;</span>&quot;</span> --login -i</span><br></pre></td></tr></table></figure>
<p>With our mintty which installed from GIT in tool-box package</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> mintty -i /c/docker/docker-quickstart-terminal.ico -w max - &amp;</span><br></pre></td></tr></table></figure>
]]></content><categories><category>administration</category></categories><tags><tag>docker</tag><tag>linux</tag><tag>virtualization</tag></tags></entry><entry><title>Working with OSGI container Karaf</title><url>/2015-working-with-osgi-container-karaf/</url><content><![CDATA[<p>This article describes the fundamental principles of the OSGi development model, using Apache Karaf or ServiceMix as the container.</p>
<span id="more"></span>
<h2 id="karaf-installation-and-startup"><a class="markdownIt-Anchor" href="#karaf-installation-and-startup"></a> Karaf Installation and Startup</h2>
<p>Before Apache Karaf can provide you with an OSGi-based container runtime, we’ll have to set up our environment first. The process is quick, requiring a minimum of normal Java usage integration work. Package download and installation can follow the guide from <a href="http://karaf.apache.org">Apache Karaf Project Site</a>. I used 3.0.3 in this tutorial.</p>
<p>After extracting the Apache Karaf distribution kit and setting environment variables, the container can be started by invoking the Karaf script provided in the  bin directory:</p>
<ul>
<li><code>bin\karaf</code> in Windows Command Shell</li>
<li><code>bin/karaf</code> in Linux Shell</li>
</ul>
<p>You can use ctrl-D to exit the shell. However, Karaf process dies when you exit the shell. To make Karaf running in the background, you can use script named start under bin directory or install Karaf as service. After that, we can use SSH client or script client under bin directory to connect already running Karaf.</p>
<p>The easiest way is to run start script:</p>
<ul>
<li><code>bin\start</code> in Windows Command Shell</li>
<li><code>bin/start</code> in Linux Shell</li>
</ul>
<p>On Linux, the command shows nothing and run in the background. You can use <code>ps -ef | grep karaf</code> to get the JVM process running with Karaf. While for windows, a shell window will appear. Now we can connect to Karaf using SSH client or client provided by Karaf. By default, Karaf opened SSH port 8101 and create user karaf with password karaf.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh localhost -p 8101 -l karaf</span><br><span class="line">$ bin/client -h localhost -a 8101 -u karaf</span><br></pre></td></tr></table></figure>
<p>When connected, using crtl-D will not quit the Karaf process, but only the connected client. If you want to quit the background process, use <code>shutdown</code> command provided by Karaf.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">karaf@root()&gt; shutdown</span><br></pre></td></tr></table></figure>
<p>To install Karaf as service, we can use the wrapper feature provided by Karaf. Start Karaf shell and run the following commands:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">karaf@root()&gt; feature:install wrapper</span><br><span class="line">karaf@root()&gt; wrapper:install -s AUTO_START -n KARAF -d Karaf -D <span class="string">&quot;KarafService&quot;</span></span><br></pre></td></tr></table></figure>
<p>On Windows platform:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin\KARAF-service install</span><br></pre></td></tr></table></figure>
<p>On linux platform:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">huhhot <span class="comment"># ln -s /opt/programming/karaf/bin/KARAF-service /etc/init.d/</span></span><br><span class="line">huhhot <span class="comment"># chkconfig KARAF-service --add</span></span><br><span class="line">huhhot <span class="comment"># chkconfig KARAF-service on</span></span><br></pre></td></tr></table></figure>
<p>Karaf supports both Felix and Equinox framework for OSGI implementation. You can switch the framework inside kraf.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">karaf@root()&gt; system:framework equinox</span><br><span class="line">Changed OSGi framework to equinox. Karaf needs to be restarted to make the change effective</span><br><span class="line">karaf@root()&gt; system:framework felix</span><br><span class="line">Changed OSGi framework to felix. Karaf needs to be restarted to make the change effective</span><br></pre></td></tr></table></figure>
<h2 id="build-karaf-osgi-bundle-using-maven"><a class="markdownIt-Anchor" href="#build-karaf-osgi-bundle-using-maven"></a> Build Karaf OSGI Bundle using Maven</h2>
<p>In this tutorial, we are going to build two OSGI bundles. One to subscribe event messages with topic while the other one to generate event. And finally we will create KAR package for easy installation, in case of Karaf in production environment without Maven repository Internet access.</p>
<p>The Open Services Gateway Initiative (OSGi), also known as the Dynamic Module System for Java, defines an architecture for modular application development. OSGi container implementations such as Knopflerfish, Equinox, and Apache Felix allow you to break your application into multiple modules and thus more easily manage cross-dependencies between them.</p>
<p>In OSGi, software is distributed in the form of a bundle. The MANIFEST.MF file acts as deployment descriptor for your bundle. The format for this file is the same as that of a normal JAR file.</p>
<h3 id="build-from-scratch-for-the-project"><a class="markdownIt-Anchor" href="#build-from-scratch-for-the-project"></a> Build from scratch for the project</h3>
<p>Maven provides archetype template toolkit to generate skelton code. With that we can do less pom.xml configuration work.</p>
<p>For the bundle to generate event, named eventpublisher here, will use both Scala and Java programming languages. That is the reason why we use archetype <code>scala-archetype-simple</code> and add bundle related configuration in pom.xml later. For me I think the configurtaion for Scala compiling is much more complex than the one for bundle. Although there are many others archetype for Scala programming, we prefer this one for our tutorial. <code>com.github.igor-petruk.archetypes:maven-archetype-scala-executable</code> is a good choice for Scala programming and it supports latest Scala version.</p>
<p>The default supported Scala version for <code>scala-archetype-simple</code> is 2.8.0 and that requires JDK version 1.6. Please set <code>JAVA_HOME</code> and <code>PATH</code> environment by yourself.</p>
<p>Now let’s start from the scratch to build the skelton,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mvn archetype:generate -DarchetypeGroupId=org.codehaus.mojo.archetypes -DarchetypeArtifactId=pom-root -DgroupId=tk.wangkexiong.osgi -DartifactId=eventtutorial -Dversion=1.0 -DinteractiveMode=<span class="literal">false</span></span><br><span class="line">$ <span class="built_in">cd</span> eventtutorial</span><br><span class="line">$ mvn archetype:generate -DarchetypeGroupId=org.apache.karaf.archetypes -DarchetypeArtifactId=karaf-command-archetype -DarchetypeVersion=3.0.3 -DgroupId=tk.wangkexiong.osgi -DartifactId=eventconsumer -Dversion=1.0 -Dscope=eventhandler -Dcommand=add -Ddescription=<span class="string">&quot;Add an event listener.&quot;</span> -DinteractiveMode=<span class="literal">false</span></span><br><span class="line">$ mvn archetype:generate -DarchetypeGroupId=org.scala-tools.archetypes -DarchetypeArtifactId=scala-archetype-simple -DgroupId=tk.wangkexiong.osgi -DartifactId=eventpublisher -Dversion=1.0 -DinteractiveMode=<span class="literal">false</span></span><br><span class="line">$ mvn archetype:generate -DarchetypeGroupId=org.apache.karaf.archetypes -DarchetypeArtifactId=karaf-kar-archetype -DarchetypeVersion=3.0.3 -DgroupId=tk.wangkexiong.osgi -DartifactId=eventkar -Dversion=1.0 -DinteractiveMode=<span class="literal">false</span></span><br><span class="line">$ mvn clean package</span><br></pre></td></tr></table></figure>
<p>There is a basic concept in Maven Multiple Modules Project, which is called reactor. Making KAR package will depend on the eventconsumer and eventpublisher modules. So the module to make KAR package should be after above 2 modules in reactor order. You may ask if we can put KAR package work in root module (eventtutorial in our case). The answer is NO, because root is always the first one to be built in reactor order.</p>
<blockquote>
<p>Here is the snippet from the Maven build logs and tells the reactor order.</p>
<p>[INFO] Reactor Summary:<br />
[INFO]<br />
[INFO] eventtutorial … SUCCESS [0.077s]<br />
[INFO] Apache Karaf :: Shell eventhandler/add Commands … SUCCESS [3.982s]<br />
[INFO] eventpublisher … SUCCESS [13.860s]<br />
[INFO] eventkar-kar … SUCCESS [1.012s]</p>
</blockquote>
<h3 id="programming-with-event-subscription"><a class="markdownIt-Anchor" href="#programming-with-event-subscription"></a> Programming with Event Subscription</h3>
<p>BundleActivator is an interface that may be implemented when a bundle is started or stopped. And it should be specified through the Bundle-Activator Manifest header.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Activator</span> <span class="keyword">implements</span> <span class="title class_">BundleActivator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(getBundleName(context) + <span class="string">&quot; Started ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(getBundleName(context) + <span class="string">&quot; Stoped ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getBundleName</span><span class="params">(BundleContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBundle().getHeaders().get(<span class="string">&quot;Bundle-Name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Next, tell the bundle to use this interface in the META-INF\MANIFEST.MF. Such file is automatic generated by Maven plugin maven-bundle-plugin.<br />
But <code>Bundle-Activator</code> header is not included by using archetype <code>karaf-command-archetype</code>, we need to add it back.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.felix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-bundle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">instructions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Bundle-SymbolicName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">Bundle-SymbolicName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Bundle-Activator</span>&gt;</span>tk.wangkexiong.osgi.Activator<span class="tag">&lt;/<span class="name">Bundle-Activator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Export-Package</span>&gt;</span>tk.wangkexiong.osgi*;version=$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Export-Package</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Import-Package</span>&gt;</span>!tk.wangkexiong.osgi*,</span><br><span class="line">                org.apache.aries.blueprint,</span><br><span class="line">                org.osgi.service.blueprint.container,</span><br><span class="line">                org.osgi.service.blueprint.reflect,</span><br><span class="line">                org.apache.felix.service.command,</span><br><span class="line">                org.apache.karaf.shell.commands,</span><br><span class="line">                org.apache.karaf.shell.console,</span><br><span class="line">                *<span class="tag">&lt;/<span class="name">Import-Package</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">instructions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We are going add 3 commands: add/remove/list under eventhandler scope. For add operation, we need to register the event topic with its eventhandler. While for remove, we need to unregister them. Thus we need a hashmap to record our event topic and its eventhandler instance.</p>
<p>The event service registration API is provided by bundleContext. We could inject it by Blueprint service, DI like Sprint.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventRepository</span> <span class="keyword">implements</span> <span class="title class_">BundleContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Registry&gt; eventHandlers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Registry&gt;();</span><br><span class="line">    <span class="keyword">protected</span> BundleContext bundleContext;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBundleContext</span><span class="params">(BundleContext bundleContext)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bundleContext = bundleContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BundleContext <span class="title function_">getBundleContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">framework</span> <span class="operator">=</span> bundleContext.getBundle(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (framework == <span class="literal">null</span>) ? bundleContext : framework.getBundleContext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the Blueprint configuration xml is under <code>eventtutorial/eventconsumer/src/main/resources/OSGI-INF/blueprint</code>. Our skelton already includes file named shell-log.xml. We can use it or rename its name as you like.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;repository&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tk.wangkexiong.osgi.business.EventRepository&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;cleanup&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bundleContext&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;blueprintBundleContext&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Now MODIFY generated code for Karaf shell command eventhandler:add. Here I renamed the add.java to AddEventCommand.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Command(scope = &quot;eventhandler&quot;, name = &quot;add&quot;, description = &quot;Add an event listener.&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddEventCommand</span> <span class="keyword">extends</span> <span class="title class_">OsgiCommandSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DESC</span> <span class="operator">=</span></span><br><span class="line">        <span class="string">&quot;The event topic to listen to (*, org/apache/karaf, org/apache/karaf/*,&quot;</span> +</span><br><span class="line">        <span class="string">&quot;org/apache/karaf/log, org.apache/karaf/log2),\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;only one handler per topic will be created.&quot;</span> +</span><br><span class="line">        <span class="string">&quot;The filter is space separated.&quot;</span>;</span><br><span class="line">    <span class="meta">@Argument(index = 0, name = &quot;filter&quot;, description = DESC, required = true, multiValued = false)</span></span><br><span class="line">    String filter;</span><br><span class="line">    EventRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">doExecute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        repository.addEvent(filter);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRepository</span><span class="params">(EventRepository respository)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.repository = respository;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Change Blueprint configuration to inject the repository for AddEventCommand, and map the command eventhandler:add with our implementation class.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">class</span>=<span class="string">&quot;tk.wangkexiong.osgi.karaf.AddEventCommand&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;repository&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;repository&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Finally, we could write our business logic for add command.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventRepository</span> <span class="keyword">implements</span> <span class="title class_">BundleContextAware</span> &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addEvent</span><span class="params">(String filter)</span> <span class="keyword">throws</span> InvalidSyntaxException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!eventHandlers.containsKey(filter)) &#123;</span><br><span class="line">            <span class="type">EventHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventDisplayer</span>();</span><br><span class="line">            Dictionary&lt;String, String&gt; properties = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, String&gt;();</span><br><span class="line">            properties.put(EventConstants.EVENT_TOPIC, filter);</span><br><span class="line"></span><br><span class="line">            ServiceRegistration&lt;?&gt; registration = getBundleContext()</span><br><span class="line">                    .registerService(EventHandler.class.getName(),</span><br><span class="line">                                     handler, properties);</span><br><span class="line"></span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Registry</span>(handler, registration);</span><br><span class="line">            eventHandlers.put(filter, registry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventDisplayer</span> <span class="keyword">implements</span> <span class="title class_">EventHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        builder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        builder.append(<span class="string">&quot;### Event received ###&quot;</span>);</span><br><span class="line">        builder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        builder.append(event.getTopic());</span><br><span class="line">        builder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String property : event.getPropertyNames()) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            builder.append(property);</span><br><span class="line">            builder.append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            builder.append(event.getProperty(property));</span><br><span class="line">            builder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Command list is used to display all the registered event topic. And Command remove is used to unregister the service and remove it from our recorded hashmap.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventRepository</span> <span class="keyword">implements</span> <span class="title class_">BundleContextAware</span> &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">removeEvent</span><span class="params">(String filter)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventHandlers.containsKey(filter)) &#123;</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> eventHandlers.get(filter);</span><br><span class="line">            registry.getRegistration().unregister();</span><br><span class="line"></span><br><span class="line">            releaseResource(registry, registry.getHandler());</span><br><span class="line">            eventHandlers.remove(filter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getFilters</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> eventHandlers.keySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="programming-with-event-generation"><a class="markdownIt-Anchor" href="#programming-with-event-generation"></a> Programming with Event Generation</h3>
<p>The pom.xml file in skelton does not know about OSGI Bundle working, we can copy back the part like the one in eventconsumer module. The source code directory in skelton only includes Scala codes, we can change it to <code>src/main</code>. Thus Java code will be put under <code>src/main/java</code> while Scala will be put under <code>src/main/scala</code>. They still follow the code directory structure rule.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.wangkexiong.osgi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eventpublisher<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>bundle<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/main<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>src/test<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.felix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-bundle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-bundle-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">instructions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Bundle-SymbolicName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">Bundle-SymbolicName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Bundle-Version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Bundle-Version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Bundle-Activator</span>&gt;</span>tk.wangkexiong.osgi.scala.Activator<span class="tag">&lt;/<span class="name">Bundle-Activator</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Export-Package</span>&gt;</span>tk.wangkexiong*;version=$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Export-Package</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Import-Package</span>&gt;</span>*<span class="tag">&lt;/<span class="name">Import-Package</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">instructions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Programming OSGI with Scala</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.osgi.framework._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Activator</span> <span class="keyword">extends</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span></span>( context: <span class="type">BundleContext</span> ) &#123;</span><br><span class="line">         <span class="keyword">var</span> bundleNames = context.getBundle().getHeaders</span><br><span class="line"></span><br><span class="line">         println(bundleNames.get(<span class="string">&quot;Bundle-Name&quot;</span>) + <span class="string">&quot; Started ...&quot;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span>( context: <span class="type">BundleContext</span> )  &#123;</span><br><span class="line">         <span class="keyword">var</span> bundleNames = context.getBundle().getHeaders</span><br><span class="line"></span><br><span class="line">         println(bundleNames.get(<span class="string">&quot;Bundle-Name&quot;</span>) + <span class="string">&quot; Stoped ...&quot;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Add a new Karaf Shell Command named event, still the bundleContext is dependency injection by Blueprint. Sending event requires EventAdmin service. We use bundleContext to check if that OSGI service is ready. Which means if we don’t have EventAdmin service ready, we cannot send event. In Karaf, we could use <code>feature:install eventadmin</code> to make that bundle installed and running.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Command(scope = &quot;event&quot;, name = &quot;publish&quot;, description = &quot;Publish Hello Event.&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublishHelloCommand</span> <span class="keyword">extends</span> <span class="title class_">OsgiCommandSupport</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">BundleContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DESC</span> <span class="operator">=</span> <span class="string">&quot;Say hello to somebody&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Argument(index = 0, name = &quot;topic&quot;, description = DESC, required = true, multiValued = false)</span></span><br><span class="line">    <span class="keyword">protected</span> String topic;</span><br><span class="line">    <span class="meta">@Argument(index = 1, name = &quot;name&quot;, description = DESC, required = true, multiValued = false)</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BundleContext bundleContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBundleContext</span><span class="params">(BundleContext bundleContext)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bundleContext = bundleContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">doExecute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ServiceReference&lt;?&gt; ref = bundleContext.getServiceReference(EventAdmin.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">EventAdmin</span> <span class="variable">eventAdmin</span> <span class="operator">=</span> (EventAdmin) bundleContext.getService(ref);</span><br><span class="line"></span><br><span class="line">            Dictionary&lt;String, String&gt; properties = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, String&gt;();</span><br><span class="line">            properties.put(<span class="string">&quot;name&quot;</span>, <span class="built_in">this</span>.name);</span><br><span class="line"></span><br><span class="line">            <span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="built_in">this</span>.topic, properties);</span><br><span class="line">            eventAdmin.sendEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;eventadmin feature is not installed...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="run-in-the-karaf"><a class="markdownIt-Anchor" href="#run-in-the-karaf"></a> Run in the Karaf</h3>
<p>First, we do a fresh build and install our bundles in local Maven repository.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mvn clean install</span><br></pre></td></tr></table></figure>
<p>In Karaf, we add our bundles using Maven repository.</p>
<p>You may notice that when install scala-library 2.8, we use <code>wrap</code> type. It is because that release does not include OSGI descriptions. We can use wrap type to deploy no-OSGI jar files(“classical” jar files). The exception information here is a bug that does not impact our bundle usage.</p>
<p>However, latest Scala-library are already OSGI bundles. The reason why I use version 2.8.0 is that, it is default generated by skelton and I want to show how to use wrap protocol here. If you don’t like it, you can upgrade the Scala version from 2.8.0 to 2.11.7. And remember to remove wrap protocol, because it is already OSGI bundle for 2.11.7.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">        __ __                  ____</span><br><span class="line">       / //_/____ __________ _/ __/</span><br><span class="line">      / ,&lt;  / __ `/ ___/ __ `/ /_</span><br><span class="line">     / /| |/ /_/ / /  / /_/ / __/</span><br><span class="line">    /_/ |_|\__,_/_/   \__,_/_/</span><br><span class="line"></span><br><span class="line">  Apache Karaf (3.0.3)</span><br><span class="line"></span><br><span class="line">Hit <span class="string">&#x27;&lt;tab&gt;&#x27;</span> <span class="keyword">for</span> a list of available commands</span><br><span class="line">and <span class="string">&#x27;[cmd] --help&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span> on a specific <span class="built_in">command</span>.</span><br><span class="line">Hit <span class="string">&#x27;&lt;ctrl-d&gt;&#x27;</span> or <span class="built_in">type</span> <span class="string">&#x27;system:shutdown&#x27;</span> or <span class="string">&#x27;logout&#x27;</span> to shutdown Karaf.</span><br><span class="line"></span><br><span class="line">karaf@root()&gt; feature:install eventadmin</span><br><span class="line">karaf@root()&gt; bundle:install -s mvn:tk.wangkexiong.osgi/eventconsumer/1.0</span><br><span class="line">Karaf :: Shell eventhandler Commands Started ...</span><br><span class="line">Bundle ID: 65</span><br><span class="line">karaf@root()&gt; bundle:install wrap:mvn:org.scala-lang/scala-library/2.8.0</span><br><span class="line">java.lang.ArrayIndexOutOfBoundsException: 176</span><br><span class="line">        at aQute.bnd.osgi.Clazz.classConstRef(Clazz.java:1862)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.crawl(Clazz.java:1166)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.doCode(Clazz.java:1134)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.doAttribute(Clazz.java:945)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.doAttributes(Clazz.java:910)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:741)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:494)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.parseClassFileWithCollector(Clazz.java:483)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:473)</span><br><span class="line">        at aQute.bnd.osgi.Analyzer.analyzeJar(Analyzer.java:2177)</span><br><span class="line">        at aQute.bnd.osgi.Analyzer.analyzeBundleClasspath(Analyzer.java:2083)</span><br><span class="line">        at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:138)</span><br><span class="line">        at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:616)</span><br><span class="line">        at org.ops4j.pax.swissbox.bnd.BndUtils.createBundle(BndUtils.java:161)</span><br><span class="line">        at org.ops4j.pax.url.wrap.internal.Connection.getInputStream(Connection.java:83)</span><br><span class="line">        at org.apache.felix.framework.util.SecureAction.getURLConnectionInputStream(SecureAction.java:524)</span><br><span class="line">        at org.apache.felix.framework.cache.JarRevision.initialize(JarRevision.java:165)</span><br><span class="line">        at org.apache.felix.framework.cache.JarRevision.&lt;init&gt;(JarRevision.java:77)</span><br><span class="line">        at org.apache.felix.framework.cache.BundleArchive.createRevisionFromLocation(BundleArchive.java:878)</span><br><span class="line">        at org.apache.felix.framework.cache.BundleArchive.reviseInternal(BundleArchive.java:550)</span><br><span class="line">        at org.apache.felix.framework.cache.BundleArchive.&lt;init&gt;(BundleArchive.java:153)</span><br><span class="line">        at org.apache.felix.framework.cache.BundleCache.create(BundleCache.java:277)</span><br><span class="line">        at org.apache.felix.framework.Felix.installBundle(Felix.java:2866)</span><br><span class="line">        at org.apache.felix.framework.BundleContextImpl.installBundle(BundleContextImpl.java:165)</span><br><span class="line">        at org.apache.karaf.bundle.command.Install.doExecute(Install.java:43)</span><br><span class="line">        at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33)</span><br><span class="line">        at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)</span><br><span class="line">        at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33)</span><br><span class="line">        at Proxy90baf6b3_ea7e_447e_a609_7de43f4600a4.execute(Unknown Source)</span><br><span class="line">        at Proxy90baf6b3_ea7e_447e_a609_7de43f4600a4.execute(Unknown Source)</span><br><span class="line">        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)</span><br><span class="line">        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)</span><br><span class="line">        at org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:208)</span><br><span class="line">        at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1<span class="variable">$1</span>.run(LocalConsoleManager.java:109)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57)</span><br><span class="line">        at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2<span class="variable">$1</span>.run(LocalConsoleManager.java:102)</span><br><span class="line">java.lang.ArrayIndexOutOfBoundsException: 176</span><br><span class="line">        at aQute.bnd.osgi.Clazz.classConstRef(Clazz.java:1862)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.crawl(Clazz.java:1166)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.doCode(Clazz.java:1134)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.doAttribute(Clazz.java:945)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.doAttributes(Clazz.java:910)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:741)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:494)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.parseClassFileWithCollector(Clazz.java:483)</span><br><span class="line">        at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:473)</span><br><span class="line">        at aQute.bnd.osgi.Analyzer.analyzeJar(Analyzer.java:2177)</span><br><span class="line">        at aQute.bnd.osgi.Analyzer.analyzeBundleClasspath(Analyzer.java:2083)</span><br><span class="line">        at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:138)</span><br><span class="line">        at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:616)</span><br><span class="line">        at org.ops4j.pax.swissbox.bnd.BndUtils.createBundle(BndUtils.java:161)</span><br><span class="line">        at org.ops4j.pax.url.wrap.internal.Connection.getInputStream(Connection.java:83)</span><br><span class="line">        at org.apache.felix.framework.util.SecureAction.getURLConnectionInputStream(SecureAction.java:524)</span><br><span class="line">        at org.apache.felix.framework.cache.JarRevision.initialize(JarRevision.java:165)</span><br><span class="line">        at org.apache.felix.framework.cache.JarRevision.&lt;init&gt;(JarRevision.java:77)</span><br><span class="line">        at org.apache.felix.framework.cache.BundleArchive.createRevisionFromLocation(BundleArchive.java:878)</span><br><span class="line">        at org.apache.felix.framework.cache.BundleArchive.reviseInternal(BundleArchive.java:550)</span><br><span class="line">        at org.apache.felix.framework.cache.BundleArchive.&lt;init&gt;(BundleArchive.java:153)</span><br><span class="line">        at org.apache.felix.framework.cache.BundleCache.create(BundleCache.java:277)</span><br><span class="line">        at org.apache.felix.framework.Felix.installBundle(Felix.java:2866)</span><br><span class="line">        at org.apache.felix.framework.BundleContextImpl.installBundle(BundleContextImpl.java:165)</span><br><span class="line">        at org.apache.karaf.bundle.command.Install.doExecute(Install.java:43)</span><br><span class="line">        at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33)</span><br><span class="line">        at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)</span><br><span class="line">        at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33)</span><br><span class="line">        at Proxy90baf6b3_ea7e_447e_a609_7de43f4600a4.execute(Unknown Source)</span><br><span class="line">        at Proxy90baf6b3_ea7e_447e_a609_7de43f4600a4.execute(Unknown Source)</span><br><span class="line">        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)</span><br><span class="line">        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)</span><br><span class="line">        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)</span><br><span class="line">        at org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:208)</span><br><span class="line">        at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1<span class="variable">$1</span>.run(LocalConsoleManager.java:109)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57)</span><br><span class="line">        at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2<span class="variable">$1</span>.run(LocalConsoleManager.java:102)</span><br><span class="line">Bundle ID: 66</span><br><span class="line">karaf@root()&gt; bundle:install -s mvn:tk.wangkexiong.osgi/eventpublisher/1.0</span><br><span class="line">Karaf :: Shell event Commands Started ...</span><br><span class="line">Bundle ID: 67</span><br><span class="line">karaf@root()&gt; eventhandler:list</span><br><span class="line">Registered EventHandler Topics</span><br><span class="line"></span><br><span class="line">karaf@root()&gt; eventhandler:add tk/wangkexiong</span><br><span class="line">karaf@root()&gt; event:publish tk/wangkexiong morning!</span><br><span class="line"></span><br><span class="line"><span class="comment">### Event received ###</span></span><br><span class="line">tk/wangkexiong</span><br><span class="line">        name-&gt;morning!</span><br><span class="line">        event.topics-&gt;tk/wangkexiong</span><br><span class="line"></span><br><span class="line">karaf@root()&gt; event:publish xxx/yyy morning!</span><br><span class="line">karaf@root()&gt; eventhandler:add xxx/yyy</span><br><span class="line">karaf@root()&gt; event:publish xxx/yyy morning!</span><br><span class="line"></span><br><span class="line"><span class="comment">### Event received ###</span></span><br><span class="line">xxx/yyy</span><br><span class="line">        name-&gt;morning!</span><br><span class="line">        event.topics-&gt;xxx/yyy</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="generate-kar-package"><a class="markdownIt-Anchor" href="#generate-kar-package"></a> Generate KAR package</h3>
<p>The programming for KAR package is very easy when using Maven <code>karaf-maven-plugin</code>. The Karaf feature file is already generated in skelton, we need to add dependency feature and bundles in the feature file. The plugin will help to include them all in the kar package. Edit the feature file named as <code>eventkar/src/main/feature/feature.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">features</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;project.artifactId&#125;-$&#123;project.version&#125;&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://karaf.apache.org/xmlns/features/v1.0.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&#x27;$&#123;project.artifactId&#125;&#x27;</span> <span class="attr">description</span>=<span class="string">&#x27;$&#123;project.name&#125;&#x27;</span> <span class="attr">version</span>=<span class="string">&#x27;$&#123;project.version&#125;&#x27;</span> <span class="attr">resolver</span>=<span class="string">&quot;$&#123;resolver&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">details</span>&gt;</span>$&#123;project.description&#125;<span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">feature</span>&gt;</span>eventadmin<span class="tag">&lt;/<span class="name">feature</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bundle</span> <span class="attr">start-level</span>=<span class="string">&#x27;40&#x27;</span>&gt;</span>wrap:mvn:org.scala-lang/scala-library/2.8.0<span class="tag">&lt;/<span class="name">bundle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bundle</span>&gt;</span>mvn:tk.wangkexiong.osgi/eventconsumer/1.0<span class="tag">&lt;/<span class="name">bundle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bundle</span>&gt;</span>mvn:tk.wangkexiong.osgi/eventpublisher/1.0<span class="tag">&lt;/<span class="name">bundle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">feature</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">features</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Let’s do a fresh build and the kar package is generated under <code>eventkar/target/</code>, which can be placed under <code>$KARAF_HOME/deploy/</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mvn clean package</span><br></pre></td></tr></table></figure>
<h2 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion"></a> Conclusion</h2>
<p>Using Maven do a great help for OSGI programming and deployment. However, we did not include basic concepts for OSGI/Bundles/OSGI Service Registry/Blueprint here. Please use <a href="https://www.google.com/#q=osgi">Google</a> for more information. And please note, the command shell in Karaf may be different from different version. Reading information from <a href="http://karaf.apache.org">Karaf web site</a> is necessary before your start.</p>
<p>p.s There is a Good PPT include almost everything for Karaf Programming, here is the <a href="http://www.anova.be/files/osgi_karaf_slides.pdf">link</a>.</p>
]]></content><categories><category>programming</category></categories><tags><tag>osgi</tag><tag>karaf</tag></tags></entry><entry><title>AEROSPIKE notes</title><url>/2015-aerospike-notes/</url><content><![CDATA[<p>AEROSPIKE is a really fast NoSQL database.</p>
<p>And we will adapt it and do DB change in our product. Here are some learning notes.</p>
<span id="more"></span>
<h2 id="using-20-byte-digest-stored-as-primary-key-in-database"><a class="markdownIt-Anchor" href="#using-20-byte-digest-stored-as-primary-key-in-database"></a> Using 20-byte digest stored as primary key in database</h2>
<p>By default, Aerospike does not store the actual primary key in the database. It stores the 20-byte digest (hash of the key) by default. This will be a huge saving for the large keys.</p>
<p>The hash function that Aerospike used is RIPEMD-160, that is known to be secure against collision based attacks. Here is <a href="https://online.tugraz.at/tug_online/voe_main2.getvolltext?pCurrPk=17675">some research on whether RIPEMD-160 is collision free</a>. If you see messages on key collisions which in Aerospike log, please report this. And, you may be able to write a research paper based on the two keys that caused the collision!</p>
<p>If the user key needs to persist on the server, use one of the following methods:</p>
<ul>
<li>Explicitly store and retrieve the user key in an application defined bin.</li>
<li>Ask the database to explicitly store key and detect collisions (e.g., in Java, set WritePolicy.sendKey to true).</li>
</ul>
<h2 id="record-deletion"><a class="markdownIt-Anchor" href="#record-deletion"></a> Record Deletion</h2>
<p>Aerospike separates the data into two parts: index and value. The index is always stored in DRAM, the value can be stored in either SSD/HDD or DRAM (with or without disk for persistence). Delete operations only do an in-memory index deletion for the records. The records on the disk are asynchronously removed by a separate defragmentation process. With defragmentation, the database reclaims storage that is no longer needed. In Aerospike there is no need to explicitly mark records for deletion, thereby reducing writes. This deletion approach is extremely effective in case of flash devices, which may have limited write cycles.</p>
<p>However, with the above performance gains that Aerospike achieves with in-memory index deletion, there is a small chance that the deleted data may not actually be deleted. Consider a scenario where a delete is issued. Before the asynchronous process deletes the record from the disk, the node itself is rebooted. If there is a cold start reboot, the deleted data will be re-indexed and appeared again.</p>
<p>There are some best practices to avoid this scenario. Starting with release Enterprise Edition 2.1.2, with a Fast Restart, Aerospike does not rebuild the whole index from disk on reboot. This will make sure that the deleted data will not get restored to the index. Additionally, instead of a delete, we recommend that you set a TTL for all the records that go into the database. Records whose TTL have expired will never be re-indexed after a reboot. Setting a low TTL value will ensure the expected deletion behavior.</p>
<p>Fast Restart (aka Warm Restart), makes use of Linux system shared memory to enable nodes to start up and re-join their cluster much faster. Database index on a server node, along with various other critical data, is allocated in system shared memory which persists even when the server process is stopped. On restarting, the process re-attaches to the persisted memory containing the index and other data, quickly rebuilds some internal state and re-joins its cluster. It does not need to read all the record data from storage drives to rebuild the index. In this way, a node with over 1 billion records will restart in about 10 seconds (as opposed to 40+ minutes without this feature). This allows cluster upgrades and various other operations to go much faster.</p>
<ul>
<li>Not using fast-restart feature and <code>cold-start-empty</code> for namespace is set to false (this is the default value). In this case when the node starts, it will read the data from disk and rebuild the index. Because the data has not been removed from disk, the node will think it is still active and build a new index entry for it. So the deleted object will return.</li>
<li>Those who doesn’t want to pay money for this, please watch on this <a href="https://github.com/tiancaiamao/aerospike-server">github project</a>. <a href="http://www.zenlife.tk/">tiancaiamao</a> give his implementation for this.</li>
<li>‘cold-start-empty’ configuration which prevents data to be loaded from disk, but only by migration from other nodes in the cluster. However, this is a static configure item and cannot be dynamic changed using AMC (Aerospike-management-Console). Which means if you need this configuration in working, you need add the line in configuration file always. But if we include this in the cluster startup, no record will be got from persistent devices.</li>
<li>A better way is making a monitor process with 2 copy of configuration files, one without ‘cold-start-empty’ configuration and the other one include it. During the very beginning startup, use the one without ‘cold-start-empty’ and we can load data from persistent devices. After that, the monitor process can monitor Aerospike instances. Use the configuration file with ‘cold-start-empty’ when Aerospike instance got down and need to restart.</li>
</ul>
]]></content></entry></search>